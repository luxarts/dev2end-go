// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pelicula

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeliculaServiceClient is the client API for PeliculaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeliculaServiceClient interface {
	AgregarPelicula(ctx context.Context, in *AgregarPeliculaRequest, opts ...grpc.CallOption) (*AgregarPeliculaResponse, error)
	ObtenerPeliculaPorNombre(ctx context.Context, in *ObtenerPeliculaPorNombreRequest, opts ...grpc.CallOption) (*ObtenerPeliculaPorNombreResponse, error)
}

type peliculaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeliculaServiceClient(cc grpc.ClientConnInterface) PeliculaServiceClient {
	return &peliculaServiceClient{cc}
}

func (c *peliculaServiceClient) AgregarPelicula(ctx context.Context, in *AgregarPeliculaRequest, opts ...grpc.CallOption) (*AgregarPeliculaResponse, error) {
	out := new(AgregarPeliculaResponse)
	err := c.cc.Invoke(ctx, "/pelicula.PeliculaService/AgregarPelicula", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peliculaServiceClient) ObtenerPeliculaPorNombre(ctx context.Context, in *ObtenerPeliculaPorNombreRequest, opts ...grpc.CallOption) (*ObtenerPeliculaPorNombreResponse, error) {
	out := new(ObtenerPeliculaPorNombreResponse)
	err := c.cc.Invoke(ctx, "/pelicula.PeliculaService/ObtenerPeliculaPorNombre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeliculaServiceServer is the server API for PeliculaService service.
// All implementations must embed UnimplementedPeliculaServiceServer
// for forward compatibility
type PeliculaServiceServer interface {
	AgregarPelicula(context.Context, *AgregarPeliculaRequest) (*AgregarPeliculaResponse, error)
	ObtenerPeliculaPorNombre(context.Context, *ObtenerPeliculaPorNombreRequest) (*ObtenerPeliculaPorNombreResponse, error)
	mustEmbedUnimplementedPeliculaServiceServer()
}

// UnimplementedPeliculaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeliculaServiceServer struct {
}

func (UnimplementedPeliculaServiceServer) AgregarPelicula(context.Context, *AgregarPeliculaRequest) (*AgregarPeliculaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarPelicula not implemented")
}
func (UnimplementedPeliculaServiceServer) ObtenerPeliculaPorNombre(context.Context, *ObtenerPeliculaPorNombreRequest) (*ObtenerPeliculaPorNombreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerPeliculaPorNombre not implemented")
}
func (UnimplementedPeliculaServiceServer) mustEmbedUnimplementedPeliculaServiceServer() {}

// UnsafePeliculaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeliculaServiceServer will
// result in compilation errors.
type UnsafePeliculaServiceServer interface {
	mustEmbedUnimplementedPeliculaServiceServer()
}

func RegisterPeliculaServiceServer(s grpc.ServiceRegistrar, srv PeliculaServiceServer) {
	s.RegisterService(&PeliculaService_ServiceDesc, srv)
}

func _PeliculaService_AgregarPelicula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgregarPeliculaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeliculaServiceServer).AgregarPelicula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pelicula.PeliculaService/AgregarPelicula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeliculaServiceServer).AgregarPelicula(ctx, req.(*AgregarPeliculaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeliculaService_ObtenerPeliculaPorNombre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObtenerPeliculaPorNombreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeliculaServiceServer).ObtenerPeliculaPorNombre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pelicula.PeliculaService/ObtenerPeliculaPorNombre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeliculaServiceServer).ObtenerPeliculaPorNombre(ctx, req.(*ObtenerPeliculaPorNombreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeliculaService_ServiceDesc is the grpc.ServiceDesc for PeliculaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeliculaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pelicula.PeliculaService",
	HandlerType: (*PeliculaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgregarPelicula",
			Handler:    _PeliculaService_AgregarPelicula_Handler,
		},
		{
			MethodName: "ObtenerPeliculaPorNombre",
			Handler:    _PeliculaService_ObtenerPeliculaPorNombre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pelicula.proto",
}
